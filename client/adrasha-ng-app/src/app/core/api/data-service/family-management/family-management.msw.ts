/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * ADRASHA DATA-SERVICE API Docs
 * OpenAPI spec version: 1.0.0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  FamilyDataResponseDTO,
  GetTotalCount2200,
  PagedModelFamilyDataResponseDTO
} from '../../../model/data-service';


export const getGetFamilyResponseMock = (overrideResponse: Partial< FamilyDataResponseDTO > = {}): FamilyDataResponseDTO => ({id: faker.helpers.arrayElement([faker.string.uuid(), undefined]), headMemberId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), locationId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), ashaId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), povertyStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(['APL','BPL'] as const), undefined]), createdAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), ...overrideResponse})

export const getUdpateFamilyResponseMock = (overrideResponse: Partial< FamilyDataResponseDTO > = {}): FamilyDataResponseDTO => ({id: faker.helpers.arrayElement([faker.string.uuid(), undefined]), headMemberId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), locationId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), ashaId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), povertyStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(['APL','BPL'] as const), undefined]), createdAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), ...overrideResponse})

export const getGetAllFamiliesResponseMock = (overrideResponse: Partial< PagedModelFamilyDataResponseDTO > = {}): PagedModelFamilyDataResponseDTO => ({content: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.uuid(), undefined]), headMemberId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), locationId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), ashaId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), povertyStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(['APL','BPL'] as const), undefined]), createdAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), page: faker.helpers.arrayElement([{size: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), number: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalElements: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalPages: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), ...overrideResponse})

export const getCreateFamilyResponseMock = (overrideResponse: Partial< FamilyDataResponseDTO > = {}): FamilyDataResponseDTO => ({id: faker.helpers.arrayElement([faker.string.uuid(), undefined]), headMemberId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), locationId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), ashaId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), povertyStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(['APL','BPL'] as const), undefined]), createdAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), ...overrideResponse})

export const getGetTotalCount2ResponseMock = (): GetTotalCount2200 => ({
        [faker.string.alphanumeric(5)]: faker.number.int({min: undefined, max: undefined})
      })


export const getGetFamilyMockHandler = (overrideResponse?: FamilyDataResponseDTO | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<FamilyDataResponseDTO> | FamilyDataResponseDTO)) => {
  return http.get('*/data/families/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetFamilyResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUdpateFamilyMockHandler = (overrideResponse?: FamilyDataResponseDTO | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<FamilyDataResponseDTO> | FamilyDataResponseDTO)) => {
  return http.put('*/data/families/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getUdpateFamilyResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteFamilyMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/data/families/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getGetAllFamiliesMockHandler = (overrideResponse?: PagedModelFamilyDataResponseDTO | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<PagedModelFamilyDataResponseDTO> | PagedModelFamilyDataResponseDTO)) => {
  return http.get('*/data/families', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetAllFamiliesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCreateFamilyMockHandler = (overrideResponse?: FamilyDataResponseDTO | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<FamilyDataResponseDTO> | FamilyDataResponseDTO)) => {
  return http.post('*/data/families', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getCreateFamilyResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetTotalCount2MockHandler = (overrideResponse?: GetTotalCount2200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetTotalCount2200> | GetTotalCount2200)) => {
  return http.get('*/data/families/count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetTotalCount2ResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getFamilyManagementMock = () => [
  getGetFamilyMockHandler(),
  getUdpateFamilyMockHandler(),
  getDeleteFamilyMockHandler(),
  getGetAllFamiliesMockHandler(),
  getCreateFamilyMockHandler(),
  getGetTotalCount2MockHandler()]
