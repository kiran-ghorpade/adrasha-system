/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * ADRASHA USER-SERVICE API Docs
 * OpenAPI spec version: 1.0.0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  GetTotalUsers200,
  PagedModelUserResponseDTO,
  RemoveRole200,
  UserResponseDTO
} from '../../../model/user-service';


export const getGetUserResponseMock = (overrideResponse: Partial< UserResponseDTO > = {}): UserResponseDTO => ({id: faker.helpers.arrayElement([faker.string.uuid(), undefined]), name: faker.helpers.arrayElement([{firstname: faker.string.alpha({length: {min: 2, max: 100}}), middlename: faker.helpers.arrayElement([faker.string.alpha({length: {min: 2, max: 100}}), undefined]), lastname: faker.string.alpha({length: {min: 2, max: 100}})}, undefined]), healthCenterId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), adharNumber: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), roles: faker.helpers.arrayElement([faker.helpers.arrayElements(['SYSTEM','USER','ADMIN','ASHA'] as const), undefined]), createdAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), ...overrideResponse})

export const getUdpatedUserResponseMock = (overrideResponse: Partial< UserResponseDTO > = {}): UserResponseDTO => ({id: faker.helpers.arrayElement([faker.string.uuid(), undefined]), name: faker.helpers.arrayElement([{firstname: faker.string.alpha({length: {min: 2, max: 100}}), middlename: faker.helpers.arrayElement([faker.string.alpha({length: {min: 2, max: 100}}), undefined]), lastname: faker.string.alpha({length: {min: 2, max: 100}})}, undefined]), healthCenterId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), adharNumber: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), roles: faker.helpers.arrayElement([faker.helpers.arrayElements(['SYSTEM','USER','ADMIN','ASHA'] as const), undefined]), createdAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), ...overrideResponse})

export const getGetAllUsersResponseMock = (overrideResponse: Partial< PagedModelUserResponseDTO > = {}): PagedModelUserResponseDTO => ({content: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.uuid(), undefined]), name: faker.helpers.arrayElement([{firstname: faker.string.alpha({length: {min: 2, max: 100}}), middlename: faker.helpers.arrayElement([faker.string.alpha({length: {min: 2, max: 100}}), undefined]), lastname: faker.string.alpha({length: {min: 2, max: 100}})}, undefined]), healthCenterId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), adharNumber: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), roles: faker.helpers.arrayElement([faker.helpers.arrayElements(['SYSTEM','USER','ADMIN','ASHA'] as const), undefined]), createdAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), page: faker.helpers.arrayElement([{size: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), number: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalElements: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalPages: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), ...overrideResponse})

export const getGetCurrentUserResponseMock = (overrideResponse: Partial< UserResponseDTO > = {}): UserResponseDTO => ({id: faker.helpers.arrayElement([faker.string.uuid(), undefined]), name: faker.helpers.arrayElement([{firstname: faker.string.alpha({length: {min: 2, max: 100}}), middlename: faker.helpers.arrayElement([faker.string.alpha({length: {min: 2, max: 100}}), undefined]), lastname: faker.string.alpha({length: {min: 2, max: 100}})}, undefined]), healthCenterId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), adharNumber: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), roles: faker.helpers.arrayElement([faker.helpers.arrayElements(['SYSTEM','USER','ADMIN','ASHA'] as const), undefined]), createdAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), ...overrideResponse})

export const getGetTotalUsersResponseMock = (): GetTotalUsers200 => ({
        [faker.string.alphanumeric(5)]: faker.number.int({min: undefined, max: undefined})
      })

export const getRemoveRoleResponseMock = (): RemoveRole200 => ({})


export const getGetUserMockHandler = (overrideResponse?: UserResponseDTO | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UserResponseDTO> | UserResponseDTO)) => {
  return http.get('*/users/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetUserResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUdpatedUserMockHandler = (overrideResponse?: UserResponseDTO | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<UserResponseDTO> | UserResponseDTO)) => {
  return http.put('*/users/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getUdpatedUserResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteUserMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/users/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getGetAllUsersMockHandler = (overrideResponse?: PagedModelUserResponseDTO | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<PagedModelUserResponseDTO> | PagedModelUserResponseDTO)) => {
  return http.get('*/users', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetAllUsersResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetCurrentUserMockHandler = (overrideResponse?: UserResponseDTO | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UserResponseDTO> | UserResponseDTO)) => {
  return http.get('*/users/me', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetCurrentUserResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetTotalUsersMockHandler = (overrideResponse?: GetTotalUsers200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetTotalUsers200> | GetTotalUsers200)) => {
  return http.get('*/users/count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetTotalUsersResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getRemoveRoleMockHandler = (overrideResponse?: RemoveRole200 | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<RemoveRole200> | RemoveRole200)) => {
  return http.delete('*/users/:id/roles/:role', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getRemoveRoleResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getUserManagementMock = () => [
  getGetUserMockHandler(),
  getUdpatedUserMockHandler(),
  getDeleteUserMockHandler(),
  getGetAllUsersMockHandler(),
  getGetCurrentUserMockHandler(),
  getGetTotalUsersMockHandler(),
  getRemoveRoleMockHandler()]
