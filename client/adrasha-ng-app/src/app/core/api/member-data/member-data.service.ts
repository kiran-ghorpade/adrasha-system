/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * ADRASHA DATA-SERVICE API Docs
 * OpenAPI spec version: 1.0.0
 */
import {
  HttpClient
} from '@angular/common/http';
import type {
  HttpContext,
  HttpEvent,
  HttpHeaders,
  HttpParams,
  HttpResponse as AngularHttpResponse
} from '@angular/common/http';

import {
  Injectable
} from '@angular/core';

import {
  Observable
} from 'rxjs';

import type {
  GetMemberCountParams,
  GetMemberPageParams,
  MemberCreateDTO,
  MemberDataPageResponseDTO,
  MemberDataResponseDTO,
  MemberUpdateDTO
} from '../../model/dataService';



type HttpClientOptions = {
  headers?: HttpHeaders | {
      [header: string]: string | string[];
  };
  context?: HttpContext;
  observe?: any;
  params?: HttpParams | {
    [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;
  };
  reportProgress?: boolean;
  responseType?: any;
  withCredentials?: boolean;
};



@Injectable({ providedIn: 'root' })
export class MemberDataService {
  constructor(
    private http: HttpClient,
  ) {} getMember<TData = MemberDataResponseDTO>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    getMember<TData = MemberDataResponseDTO>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    getMember<TData = MemberDataResponseDTO>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;getMember<TData = MemberDataResponseDTO>(
    id: string, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.get<TData>(
      `http://localhost:8080/data/members/${id}`,options
    );
  }
 udpateMember<TData = MemberDataResponseDTO>(
    id: string,
    memberUpdateDTO: MemberUpdateDTO, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    udpateMember<TData = MemberDataResponseDTO>(
    id: string,
    memberUpdateDTO: MemberUpdateDTO, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    udpateMember<TData = MemberDataResponseDTO>(
    id: string,
    memberUpdateDTO: MemberUpdateDTO, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;udpateMember<TData = MemberDataResponseDTO>(
    id: string,
    memberUpdateDTO: MemberUpdateDTO, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.put<TData>(
      `http://localhost:8080/data/members/${id}`,
      memberUpdateDTO,options
    );
  }
 deleteMember<TData = void>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    deleteMember<TData = void>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    deleteMember<TData = void>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;deleteMember<TData = void>(
    id: string, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.delete<TData>(
      `http://localhost:8080/data/members/${id}`,options
    );
  }
 getMemberPage<TData = MemberDataPageResponseDTO>(
    params: GetMemberPageParams, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    getMemberPage<TData = MemberDataPageResponseDTO>(
    params: GetMemberPageParams, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    getMemberPage<TData = MemberDataPageResponseDTO>(
    params: GetMemberPageParams, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;getMemberPage<TData = MemberDataPageResponseDTO>(
    params: GetMemberPageParams, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.get<TData>(
      `http://localhost:8080/data/members`,{
    ...options,
        params: {...params.filterDTO, ...params.pageable, ...options?.params},}
    );
  }
 createMember<TData = MemberDataResponseDTO>(
    memberCreateDTO: MemberCreateDTO, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    createMember<TData = MemberDataResponseDTO>(
    memberCreateDTO: MemberCreateDTO, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    createMember<TData = MemberDataResponseDTO>(
    memberCreateDTO: MemberCreateDTO, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;createMember<TData = MemberDataResponseDTO>(
    memberCreateDTO: MemberCreateDTO, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.post<TData>(
      `http://localhost:8080/data/members`,
      memberCreateDTO,options
    );
  }
 getMemberCount<TData = number>(
    params: GetMemberCountParams, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    getMemberCount<TData = number>(
    params: GetMemberCountParams, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    getMemberCount<TData = number>(
    params: GetMemberCountParams, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;getMemberCount<TData = number>(
    params: GetMemberCountParams, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.get<TData>(
      `http://localhost:8080/data/members/count`,{
    ...options,
        params: {...params.filterDTO, ...options?.params},}
    );
  }
};

export type GetMemberClientResult = NonNullable<MemberDataResponseDTO>
export type UdpateMemberClientResult = NonNullable<MemberDataResponseDTO>
export type DeleteMemberClientResult = NonNullable<void>
export type GetMemberPageClientResult = NonNullable<MemberDataPageResponseDTO>
export type CreateMemberClientResult = NonNullable<MemberDataResponseDTO>
export type GetMemberCountClientResult = NonNullable<number>
