/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * ADRASHA MASTERDATA-SERVICE API Docs
 * OpenAPI spec version: 1.0.0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  GetTotalCount200,
  LocationResponseDTO,
  PagedModelLocationResponseDTO
} from '../../../model/masterdata-service';


export const getGetLocationResponseMock = (overrideResponse: Partial< LocationResponseDTO > = {}): LocationResponseDTO => ({id: faker.helpers.arrayElement([faker.string.uuid(), undefined]), name: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), type: faker.helpers.arrayElement([faker.helpers.arrayElement(['City','Village','Town','Hamlet'] as const), undefined]), pincode: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), subdistrict: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), district: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), state: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), country: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), createdAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), ...overrideResponse})

export const getUpdateLocationResponseMock = (overrideResponse: Partial< LocationResponseDTO > = {}): LocationResponseDTO => ({id: faker.helpers.arrayElement([faker.string.uuid(), undefined]), name: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), type: faker.helpers.arrayElement([faker.helpers.arrayElement(['City','Village','Town','Hamlet'] as const), undefined]), pincode: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), subdistrict: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), district: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), state: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), country: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), createdAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), ...overrideResponse})

export const getGetAllLocationsResponseMock = (overrideResponse: Partial< PagedModelLocationResponseDTO > = {}): PagedModelLocationResponseDTO => ({content: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.uuid(), undefined]), name: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), type: faker.helpers.arrayElement([faker.helpers.arrayElement(['City','Village','Town','Hamlet'] as const), undefined]), pincode: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), subdistrict: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), district: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), state: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), country: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), createdAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), page: faker.helpers.arrayElement([{size: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), number: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalElements: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalPages: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), ...overrideResponse})

export const getCreateLocationResponseMock = (overrideResponse: Partial< LocationResponseDTO > = {}): LocationResponseDTO => ({id: faker.helpers.arrayElement([faker.string.uuid(), undefined]), name: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), type: faker.helpers.arrayElement([faker.helpers.arrayElement(['City','Village','Town','Hamlet'] as const), undefined]), pincode: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), subdistrict: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), district: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), state: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), country: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), createdAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), ...overrideResponse})

export const getGetTotalCountResponseMock = (): GetTotalCount200 => ({
        [faker.string.alphanumeric(5)]: faker.number.int({min: undefined, max: undefined})
      })


export const getGetLocationMockHandler = (overrideResponse?: LocationResponseDTO | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<LocationResponseDTO> | LocationResponseDTO)) => {
  return http.get('*/masterdata/locations/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetLocationResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateLocationMockHandler = (overrideResponse?: LocationResponseDTO | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<LocationResponseDTO> | LocationResponseDTO)) => {
  return http.put('*/masterdata/locations/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getUpdateLocationResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteLocationMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/masterdata/locations/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getGetAllLocationsMockHandler = (overrideResponse?: PagedModelLocationResponseDTO | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<PagedModelLocationResponseDTO> | PagedModelLocationResponseDTO)) => {
  return http.get('*/masterdata/locations', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetAllLocationsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCreateLocationMockHandler = (overrideResponse?: LocationResponseDTO | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<LocationResponseDTO> | LocationResponseDTO)) => {
  return http.post('*/masterdata/locations', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getCreateLocationResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetTotalCountMockHandler = (overrideResponse?: GetTotalCount200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetTotalCount200> | GetTotalCount200)) => {
  return http.get('*/masterdata/locations/count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetTotalCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getLocationManagementMock = () => [
  getGetLocationMockHandler(),
  getUpdateLocationMockHandler(),
  getDeleteLocationMockHandler(),
  getGetAllLocationsMockHandler(),
  getCreateLocationMockHandler(),
  getGetTotalCountMockHandler()]
