/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * ADRASHA DATA-SERVICE API Docs
 * OpenAPI spec version: 1.0.0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  GetTotalCount200,
  MemberDataResponseDTO,
  PagedModelMemberDataResponseDTO
} from '../../../model/data-service';


export const getGetMemberResponseMock = (overrideResponse: Partial< MemberDataResponseDTO > = {}): MemberDataResponseDTO => ({id: faker.helpers.arrayElement([faker.string.uuid(), undefined]), familyId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), ashaId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), name: faker.helpers.arrayElement([{firstname: faker.string.alpha({length: {min: 2, max: 100}}), middlename: faker.helpers.arrayElement([faker.string.alpha({length: {min: 2, max: 100}}), undefined]), lastname: faker.string.alpha({length: {min: 2, max: 100}})}, undefined]), gender: faker.helpers.arrayElement([faker.helpers.arrayElement(['MALE','FEMALE','OTHER'] as const), undefined]), dateOfBirth: faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], undefined]), birthPlace: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), age: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), adharNumber: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), abhaNumber: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), mobileNumber: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), alive: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), createdAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), ...overrideResponse})

export const getUdpateMemberResponseMock = (overrideResponse: Partial< MemberDataResponseDTO > = {}): MemberDataResponseDTO => ({id: faker.helpers.arrayElement([faker.string.uuid(), undefined]), familyId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), ashaId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), name: faker.helpers.arrayElement([{firstname: faker.string.alpha({length: {min: 2, max: 100}}), middlename: faker.helpers.arrayElement([faker.string.alpha({length: {min: 2, max: 100}}), undefined]), lastname: faker.string.alpha({length: {min: 2, max: 100}})}, undefined]), gender: faker.helpers.arrayElement([faker.helpers.arrayElement(['MALE','FEMALE','OTHER'] as const), undefined]), dateOfBirth: faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], undefined]), birthPlace: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), age: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), adharNumber: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), abhaNumber: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), mobileNumber: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), alive: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), createdAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), ...overrideResponse})

export const getGetAllMembersResponseMock = (overrideResponse: Partial< PagedModelMemberDataResponseDTO > = {}): PagedModelMemberDataResponseDTO => ({content: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.uuid(), undefined]), familyId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), ashaId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), name: faker.helpers.arrayElement([{firstname: faker.string.alpha({length: {min: 2, max: 100}}), middlename: faker.helpers.arrayElement([faker.string.alpha({length: {min: 2, max: 100}}), undefined]), lastname: faker.string.alpha({length: {min: 2, max: 100}})}, undefined]), gender: faker.helpers.arrayElement([faker.helpers.arrayElement(['MALE','FEMALE','OTHER'] as const), undefined]), dateOfBirth: faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], undefined]), birthPlace: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), age: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), adharNumber: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), abhaNumber: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), mobileNumber: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), alive: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), createdAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), page: faker.helpers.arrayElement([{size: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), number: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalElements: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalPages: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), ...overrideResponse})

export const getCreateMemberResponseMock = (overrideResponse: Partial< MemberDataResponseDTO > = {}): MemberDataResponseDTO => ({id: faker.helpers.arrayElement([faker.string.uuid(), undefined]), familyId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), ashaId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), name: faker.helpers.arrayElement([{firstname: faker.string.alpha({length: {min: 2, max: 100}}), middlename: faker.helpers.arrayElement([faker.string.alpha({length: {min: 2, max: 100}}), undefined]), lastname: faker.string.alpha({length: {min: 2, max: 100}})}, undefined]), gender: faker.helpers.arrayElement([faker.helpers.arrayElement(['MALE','FEMALE','OTHER'] as const), undefined]), dateOfBirth: faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], undefined]), birthPlace: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), age: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), adharNumber: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), abhaNumber: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), mobileNumber: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), alive: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), createdAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), ...overrideResponse})

export const getGetTotalCountResponseMock = (): GetTotalCount200 => ({
        [faker.string.alphanumeric(5)]: faker.number.int({min: undefined, max: undefined})
      })


export const getGetMemberMockHandler = (overrideResponse?: MemberDataResponseDTO | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<MemberDataResponseDTO> | MemberDataResponseDTO)) => {
  return http.get('*/data/members/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetMemberResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUdpateMemberMockHandler = (overrideResponse?: MemberDataResponseDTO | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<MemberDataResponseDTO> | MemberDataResponseDTO)) => {
  return http.put('*/data/members/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getUdpateMemberResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteMemberMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/data/members/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getGetAllMembersMockHandler = (overrideResponse?: PagedModelMemberDataResponseDTO | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<PagedModelMemberDataResponseDTO> | PagedModelMemberDataResponseDTO)) => {
  return http.get('*/data/members', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetAllMembersResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCreateMemberMockHandler = (overrideResponse?: MemberDataResponseDTO | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<MemberDataResponseDTO> | MemberDataResponseDTO)) => {
  return http.post('*/data/members', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getCreateMemberResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetTotalCountMockHandler = (overrideResponse?: GetTotalCount200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetTotalCount200> | GetTotalCount200)) => {
  return http.get('*/data/members/count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetTotalCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getMemberManagementMock = () => [
  getGetMemberMockHandler(),
  getUdpateMemberMockHandler(),
  getDeleteMemberMockHandler(),
  getGetAllMembersMockHandler(),
  getCreateMemberMockHandler(),
  getGetTotalCountMockHandler()]
