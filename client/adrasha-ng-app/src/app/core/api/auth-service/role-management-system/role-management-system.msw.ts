/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * ADRASHA AUTH-SERVICE API Docs
 * OpenAPI spec version: 1.0.0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  JwtUser
} from '../../../model/auth-service';


export const getAddRoleResponseMock = (overrideResponse: Partial< JwtUser > = {}): JwtUser => ({id: faker.helpers.arrayElement([faker.string.uuid(), undefined]), username: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), roles: faker.helpers.arrayElement([faker.helpers.arrayElements(['USER','ADMIN','ASHA'] as const), undefined]), status: faker.helpers.arrayElement([faker.helpers.arrayElement(['PENDING','APPROVED','REJECTED','BLOCKED'] as const), undefined]), ...overrideResponse})

export const getRemoveRoleResponseMock = (overrideResponse: Partial< JwtUser > = {}): JwtUser => ({id: faker.helpers.arrayElement([faker.string.uuid(), undefined]), username: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), roles: faker.helpers.arrayElement([faker.helpers.arrayElements(['USER','ADMIN','ASHA'] as const), undefined]), status: faker.helpers.arrayElement([faker.helpers.arrayElement(['PENDING','APPROVED','REJECTED','BLOCKED'] as const), undefined]), ...overrideResponse})


export const getAddRoleMockHandler = (overrideResponse?: JwtUser | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<JwtUser> | JwtUser)) => {
  return http.put('*/auth/roles', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getAddRoleResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getRemoveRoleMockHandler = (overrideResponse?: JwtUser | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<JwtUser> | JwtUser)) => {
  return http.delete('*/auth/roles', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getRemoveRoleResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getRoleManagementSystemMock = () => [
  getAddRoleMockHandler(),
  getRemoveRoleMockHandler()]
