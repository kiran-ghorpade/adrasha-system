/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * ADRASHA DATA-SERVICE API Docs
 * OpenAPI spec version: 1.0.0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  GetTotalCount1200,
  HealthRecordResponseDTO,
  PagedModelHealthRecordResponseDTO
} from '../../../model/data-service';


export const getGetHealthRecordResponseMock = (overrideResponse: Partial< HealthRecordResponseDTO > = {}): HealthRecordResponseDTO => ({id: faker.helpers.arrayElement([faker.string.uuid(), undefined]), memberId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), ashaId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), date: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), pregnant: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), height: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), undefined]), weight: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), undefined]), createdAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), ncdlist: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.uuid())), undefined]), ...overrideResponse})

export const getUpdateHealthRecordResponseMock = (overrideResponse: Partial< HealthRecordResponseDTO > = {}): HealthRecordResponseDTO => ({id: faker.helpers.arrayElement([faker.string.uuid(), undefined]), memberId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), ashaId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), date: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), pregnant: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), height: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), undefined]), weight: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), undefined]), createdAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), ncdlist: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.uuid())), undefined]), ...overrideResponse})

export const getGetAllHealthRecordsResponseMock = (overrideResponse: Partial< PagedModelHealthRecordResponseDTO > = {}): PagedModelHealthRecordResponseDTO => ({content: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.uuid(), undefined]), memberId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), ashaId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), date: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), pregnant: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), height: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), undefined]), weight: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), undefined]), createdAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), ncdlist: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.uuid())), undefined])})), undefined]), page: faker.helpers.arrayElement([{size: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), number: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalElements: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalPages: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), ...overrideResponse})

export const getCreateHealthResponseMock = (overrideResponse: Partial< HealthRecordResponseDTO > = {}): HealthRecordResponseDTO => ({id: faker.helpers.arrayElement([faker.string.uuid(), undefined]), memberId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), ashaId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), date: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), pregnant: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), height: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), undefined]), weight: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), undefined]), createdAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), ncdlist: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.uuid())), undefined]), ...overrideResponse})

export const getGetTotalCount1ResponseMock = (): GetTotalCount1200 => ({
        [faker.string.alphanumeric(5)]: faker.number.int({min: undefined, max: undefined})
      })


export const getGetHealthRecordMockHandler = (overrideResponse?: HealthRecordResponseDTO | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<HealthRecordResponseDTO> | HealthRecordResponseDTO)) => {
  return http.get('*/data/healthRecords/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetHealthRecordResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateHealthRecordMockHandler = (overrideResponse?: HealthRecordResponseDTO | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<HealthRecordResponseDTO> | HealthRecordResponseDTO)) => {
  return http.put('*/data/healthRecords/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getUpdateHealthRecordResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteHealthRecordMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/data/healthRecords/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getGetAllHealthRecordsMockHandler = (overrideResponse?: PagedModelHealthRecordResponseDTO | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<PagedModelHealthRecordResponseDTO> | PagedModelHealthRecordResponseDTO)) => {
  return http.get('*/data/healthRecords', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetAllHealthRecordsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCreateHealthMockHandler = (overrideResponse?: HealthRecordResponseDTO | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<HealthRecordResponseDTO> | HealthRecordResponseDTO)) => {
  return http.post('*/data/healthRecords', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getCreateHealthResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetTotalCount1MockHandler = (overrideResponse?: GetTotalCount1200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetTotalCount1200> | GetTotalCount1200)) => {
  return http.get('*/data/healthRecords/count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetTotalCount1ResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getHealthManagementMock = () => [
  getGetHealthRecordMockHandler(),
  getUpdateHealthRecordMockHandler(),
  getDeleteHealthRecordMockHandler(),
  getGetAllHealthRecordsMockHandler(),
  getCreateHealthMockHandler(),
  getGetTotalCount1MockHandler()]
