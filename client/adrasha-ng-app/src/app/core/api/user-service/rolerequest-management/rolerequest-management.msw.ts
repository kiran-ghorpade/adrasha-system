/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * ADRASHA USER-SERVICE API Docs
 * OpenAPI spec version: 1.0.0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  GetTotalRoleRequests200,
  PagedModelRoleRequestResponseDTO,
  RoleRequestResponseDTO
} from '../../../model/user-service';


export const getGetRoleRequestResponseMock = (overrideResponse: Partial< RoleRequestResponseDTO > = {}): RoleRequestResponseDTO => ({id: faker.helpers.arrayElement([faker.string.uuid(), undefined]), name: faker.helpers.arrayElement([{firstname: faker.string.alpha({length: {min: 2, max: 100}}), middlename: faker.helpers.arrayElement([faker.string.alpha({length: {min: 2, max: 100}}), undefined]), lastname: faker.string.alpha({length: {min: 2, max: 100}})}, undefined]), role: faker.helpers.arrayElement([faker.helpers.arrayElement(['SYSTEM','USER','ADMIN','ASHA'] as const), undefined]), userId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), status: faker.helpers.arrayElement([faker.helpers.arrayElement(['PENDING','APPROVED','REJECTED'] as const), undefined]), healthCenter: faker.helpers.arrayElement([faker.string.uuid(), undefined]), createdAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), ...overrideResponse})

export const getUpdateRoleRequestResponseMock = (overrideResponse: Partial< RoleRequestResponseDTO > = {}): RoleRequestResponseDTO => ({id: faker.helpers.arrayElement([faker.string.uuid(), undefined]), name: faker.helpers.arrayElement([{firstname: faker.string.alpha({length: {min: 2, max: 100}}), middlename: faker.helpers.arrayElement([faker.string.alpha({length: {min: 2, max: 100}}), undefined]), lastname: faker.string.alpha({length: {min: 2, max: 100}})}, undefined]), role: faker.helpers.arrayElement([faker.helpers.arrayElement(['SYSTEM','USER','ADMIN','ASHA'] as const), undefined]), userId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), status: faker.helpers.arrayElement([faker.helpers.arrayElement(['PENDING','APPROVED','REJECTED'] as const), undefined]), healthCenter: faker.helpers.arrayElement([faker.string.uuid(), undefined]), createdAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), ...overrideResponse})

export const getGetAllRoleRequestsResponseMock = (overrideResponse: Partial< PagedModelRoleRequestResponseDTO > = {}): PagedModelRoleRequestResponseDTO => ({content: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.uuid(), undefined]), name: faker.helpers.arrayElement([{firstname: faker.string.alpha({length: {min: 2, max: 100}}), middlename: faker.helpers.arrayElement([faker.string.alpha({length: {min: 2, max: 100}}), undefined]), lastname: faker.string.alpha({length: {min: 2, max: 100}})}, undefined]), role: faker.helpers.arrayElement([faker.helpers.arrayElement(['SYSTEM','USER','ADMIN','ASHA'] as const), undefined]), userId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), status: faker.helpers.arrayElement([faker.helpers.arrayElement(['PENDING','APPROVED','REJECTED'] as const), undefined]), healthCenter: faker.helpers.arrayElement([faker.string.uuid(), undefined]), createdAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), page: faker.helpers.arrayElement([{size: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), number: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalElements: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalPages: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), ...overrideResponse})

export const getCreateRoleRequestResponseMock = (overrideResponse: Partial< RoleRequestResponseDTO > = {}): RoleRequestResponseDTO => ({id: faker.helpers.arrayElement([faker.string.uuid(), undefined]), name: faker.helpers.arrayElement([{firstname: faker.string.alpha({length: {min: 2, max: 100}}), middlename: faker.helpers.arrayElement([faker.string.alpha({length: {min: 2, max: 100}}), undefined]), lastname: faker.string.alpha({length: {min: 2, max: 100}})}, undefined]), role: faker.helpers.arrayElement([faker.helpers.arrayElement(['SYSTEM','USER','ADMIN','ASHA'] as const), undefined]), userId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), status: faker.helpers.arrayElement([faker.helpers.arrayElement(['PENDING','APPROVED','REJECTED'] as const), undefined]), healthCenter: faker.helpers.arrayElement([faker.string.uuid(), undefined]), createdAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), ...overrideResponse})

export const getGetCurrentUserRoleRequestResponseMock = (overrideResponse: Partial< RoleRequestResponseDTO > = {}): RoleRequestResponseDTO => ({id: faker.helpers.arrayElement([faker.string.uuid(), undefined]), name: faker.helpers.arrayElement([{firstname: faker.string.alpha({length: {min: 2, max: 100}}), middlename: faker.helpers.arrayElement([faker.string.alpha({length: {min: 2, max: 100}}), undefined]), lastname: faker.string.alpha({length: {min: 2, max: 100}})}, undefined]), role: faker.helpers.arrayElement([faker.helpers.arrayElement(['SYSTEM','USER','ADMIN','ASHA'] as const), undefined]), userId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), status: faker.helpers.arrayElement([faker.helpers.arrayElement(['PENDING','APPROVED','REJECTED'] as const), undefined]), healthCenter: faker.helpers.arrayElement([faker.string.uuid(), undefined]), createdAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), ...overrideResponse})

export const getGetTotalRoleRequestsResponseMock = (): GetTotalRoleRequests200 => ({
        [faker.string.alphanumeric(5)]: faker.number.int({min: undefined, max: undefined})
      })


export const getGetRoleRequestMockHandler = (overrideResponse?: RoleRequestResponseDTO | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<RoleRequestResponseDTO> | RoleRequestResponseDTO)) => {
  return http.get('*/roleRequests/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetRoleRequestResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateRoleRequestMockHandler = (overrideResponse?: RoleRequestResponseDTO | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<RoleRequestResponseDTO> | RoleRequestResponseDTO)) => {
  return http.put('*/roleRequests/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getUpdateRoleRequestResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteRoleRequestMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/roleRequests/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getRejectUserRequestMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<void> | void)) => {
  return http.put('*/roleRequests/reject/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getApproveUserRequestMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<void> | void)) => {
  return http.put('*/roleRequests/approve/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getGetAllRoleRequestsMockHandler = (overrideResponse?: PagedModelRoleRequestResponseDTO | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<PagedModelRoleRequestResponseDTO> | PagedModelRoleRequestResponseDTO)) => {
  return http.get('*/roleRequests', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetAllRoleRequestsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCreateRoleRequestMockHandler = (overrideResponse?: RoleRequestResponseDTO | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<RoleRequestResponseDTO> | RoleRequestResponseDTO)) => {
  return http.post('*/roleRequests', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getCreateRoleRequestResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetCurrentUserRoleRequestMockHandler = (overrideResponse?: RoleRequestResponseDTO | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<RoleRequestResponseDTO> | RoleRequestResponseDTO)) => {
  return http.get('*/roleRequests/me', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetCurrentUserRoleRequestResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetTotalRoleRequestsMockHandler = (overrideResponse?: GetTotalRoleRequests200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetTotalRoleRequests200> | GetTotalRoleRequests200)) => {
  return http.get('*/roleRequests/count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetTotalRoleRequestsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getRolerequestManagementMock = () => [
  getGetRoleRequestMockHandler(),
  getUpdateRoleRequestMockHandler(),
  getDeleteRoleRequestMockHandler(),
  getRejectUserRequestMockHandler(),
  getApproveUserRequestMockHandler(),
  getGetAllRoleRequestsMockHandler(),
  getCreateRoleRequestMockHandler(),
  getGetCurrentUserRoleRequestMockHandler(),
  getGetTotalRoleRequestsMockHandler()]
