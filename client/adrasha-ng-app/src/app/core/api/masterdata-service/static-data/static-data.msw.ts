/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * ADRASHA MASTERDATA-SERVICE API Docs
 * OpenAPI spec version: 1.0.0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  StaticDataDTO
} from '../../../model/masterdata-service';


export const getGetRolesResponseMock = (): StaticDataDTO[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({code: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), label: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined])})))

export const getGetRequestStatusResponseMock = (): StaticDataDTO[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({code: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), label: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined])})))

export const getGetPovertyStatusesResponseMock = (): StaticDataDTO[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({code: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), label: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined])})))

export const getGetLocationTypesResponseMock = (): StaticDataDTO[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({code: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), label: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined])})))

export const getGetHealthCenterTypesResponseMock = (): StaticDataDTO[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({code: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), label: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined])})))

export const getGetGendersResponseMock = (): StaticDataDTO[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({code: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), label: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined])})))

export const getGetAgeGroupsResponseMock = (): StaticDataDTO[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({code: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), label: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined])})))


export const getGetRolesMockHandler = (overrideResponse?: StaticDataDTO[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<StaticDataDTO[]> | StaticDataDTO[])) => {
  return http.get('*/masterdata/roles', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetRolesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetRequestStatusMockHandler = (overrideResponse?: StaticDataDTO[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<StaticDataDTO[]> | StaticDataDTO[])) => {
  return http.get('*/masterdata/request-statuses', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetRequestStatusResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetPovertyStatusesMockHandler = (overrideResponse?: StaticDataDTO[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<StaticDataDTO[]> | StaticDataDTO[])) => {
  return http.get('*/masterdata/poverty-statuses', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetPovertyStatusesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetLocationTypesMockHandler = (overrideResponse?: StaticDataDTO[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<StaticDataDTO[]> | StaticDataDTO[])) => {
  return http.get('*/masterdata/location-types', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetLocationTypesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetHealthCenterTypesMockHandler = (overrideResponse?: StaticDataDTO[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<StaticDataDTO[]> | StaticDataDTO[])) => {
  return http.get('*/masterdata/health-center-types', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetHealthCenterTypesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetGendersMockHandler = (overrideResponse?: StaticDataDTO[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<StaticDataDTO[]> | StaticDataDTO[])) => {
  return http.get('*/masterdata/genders', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetGendersResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetAgeGroupsMockHandler = (overrideResponse?: StaticDataDTO[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<StaticDataDTO[]> | StaticDataDTO[])) => {
  return http.get('*/masterdata/age-groups', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetAgeGroupsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getStaticDataMock = () => [
  getGetRolesMockHandler(),
  getGetRequestStatusMockHandler(),
  getGetPovertyStatusesMockHandler(),
  getGetLocationTypesMockHandler(),
  getGetHealthCenterTypesMockHandler(),
  getGetGendersMockHandler(),
  getGetAgeGroupsMockHandler()]
