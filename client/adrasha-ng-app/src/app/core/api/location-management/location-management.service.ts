/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * ADRASHA MASTERDATA-SERVICE API Docs
 * OpenAPI spec version: 1.0.0
 */
import {
  HttpClient
} from '@angular/common/http';
import type {
  HttpContext,
  HttpEvent,
  HttpHeaders,
  HttpParams,
  HttpResponse as AngularHttpResponse
} from '@angular/common/http';

import {
  Injectable
} from '@angular/core';

import {
  Observable
} from 'rxjs';

import type {
  GetAllLocationsParams,
  GetTotalCountParams,
  LocationCreateDTO,
  LocationPageResponseDTO,
  LocationResponseDTO,
  LocationUpdateDTO
} from '../../model/masterdata-service';



type HttpClientOptions = {
  headers?: HttpHeaders | {
      [header: string]: string | string[];
  };
  context?: HttpContext;
  observe?: any;
  params?: HttpParams | {
    [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;
  };
  reportProgress?: boolean;
  responseType?: any;
  withCredentials?: boolean;
};



@Injectable({ providedIn: 'root' })
export class LocationManagementService {
  constructor(
    private http: HttpClient,
  ) {} getLocation<TData = LocationResponseDTO>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    getLocation<TData = LocationResponseDTO>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    getLocation<TData = LocationResponseDTO>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;getLocation<TData = LocationResponseDTO>(
    id: string, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.get<TData>(
      `http://localhost:8080/masterdata/locations/${id}`,options
    );
  }
 updateLocation<TData = LocationResponseDTO>(
    id: string,
    locationUpdateDTO: LocationUpdateDTO, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    updateLocation<TData = LocationResponseDTO>(
    id: string,
    locationUpdateDTO: LocationUpdateDTO, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    updateLocation<TData = LocationResponseDTO>(
    id: string,
    locationUpdateDTO: LocationUpdateDTO, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;updateLocation<TData = LocationResponseDTO>(
    id: string,
    locationUpdateDTO: LocationUpdateDTO, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.put<TData>(
      `http://localhost:8080/masterdata/locations/${id}`,
      locationUpdateDTO,options
    );
  }
 deleteLocation<TData = void>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    deleteLocation<TData = void>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    deleteLocation<TData = void>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;deleteLocation<TData = void>(
    id: string, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.delete<TData>(
      `http://localhost:8080/masterdata/locations/${id}`,options
    );
  }
 getAllLocations<TData = LocationPageResponseDTO>(
    params: GetAllLocationsParams, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    getAllLocations<TData = LocationPageResponseDTO>(
    params: GetAllLocationsParams, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    getAllLocations<TData = LocationPageResponseDTO>(
    params: GetAllLocationsParams, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;getAllLocations<TData = LocationPageResponseDTO>(
    params: GetAllLocationsParams, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.get<TData>(
      `http://localhost:8080/masterdata/locations`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }
 createLocation<TData = LocationResponseDTO>(
    locationCreateDTO: LocationCreateDTO, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    createLocation<TData = LocationResponseDTO>(
    locationCreateDTO: LocationCreateDTO, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    createLocation<TData = LocationResponseDTO>(
    locationCreateDTO: LocationCreateDTO, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;createLocation<TData = LocationResponseDTO>(
    locationCreateDTO: LocationCreateDTO, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.post<TData>(
      `http://localhost:8080/masterdata/locations`,
      locationCreateDTO,options
    );
  }
 getTotalCount<TData = string>(
    params: GetTotalCountParams, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    getTotalCount<TData = string>(
    params: GetTotalCountParams, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    getTotalCount<TData = string>(
    params: GetTotalCountParams, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;getTotalCount<TData = string>(
    params: GetTotalCountParams, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.get<TData>(
      `http://localhost:8080/masterdata/locations/count`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }
};

export type GetLocationClientResult = NonNullable<LocationResponseDTO>
export type UpdateLocationClientResult = NonNullable<LocationResponseDTO>
export type DeleteLocationClientResult = NonNullable<void>
export type GetAllLocationsClientResult = NonNullable<LocationPageResponseDTO>
export type CreateLocationClientResult = NonNullable<LocationResponseDTO>
export type GetTotalCountClientResult = NonNullable<string>
