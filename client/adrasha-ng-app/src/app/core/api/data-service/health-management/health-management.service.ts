/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * ADRASHA DATA-SERVICE API Docs
 * OpenAPI spec version: 1.0.0
 */
import {
  HttpClient
} from '@angular/common/http';
import type {
  HttpContext,
  HttpEvent,
  HttpHeaders,
  HttpParams,
  HttpResponse as AngularHttpResponse
} from '@angular/common/http';

import {
  Injectable
} from '@angular/core';

import {
  Observable
} from 'rxjs';

import type {
  GetAllHealthRecordsParams,
  GetTotalCount1200,
  GetTotalCount1Params,
  HealthCreateDTO,
  HealthRecordResponseDTO,
  HealthUpdateDTO,
  PagedModelHealthRecordResponseDTO
} from '../../../model/data-service';



type HttpClientOptions = {
  headers?: HttpHeaders | {
      [header: string]: string | string[];
  };
  context?: HttpContext;
  observe?: any;
  params?: HttpParams | {
    [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;
  };
  reportProgress?: boolean;
  responseType?: any;
  withCredentials?: boolean;
};



@Injectable({ providedIn: 'root' })
export class HealthManagementService {
  constructor(
    private http: HttpClient,
  ) {} getHealthRecord<TData = HealthRecordResponseDTO>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    getHealthRecord<TData = HealthRecordResponseDTO>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    getHealthRecord<TData = HealthRecordResponseDTO>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;getHealthRecord<TData = HealthRecordResponseDTO>(
    id: string, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.get<TData>(
      `http://localhost:8080/data/healthRecords/${id}`,options
    );
  }
 updateHealthRecord<TData = HealthRecordResponseDTO>(
    id: string,
    healthUpdateDTO: HealthUpdateDTO, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    updateHealthRecord<TData = HealthRecordResponseDTO>(
    id: string,
    healthUpdateDTO: HealthUpdateDTO, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    updateHealthRecord<TData = HealthRecordResponseDTO>(
    id: string,
    healthUpdateDTO: HealthUpdateDTO, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;updateHealthRecord<TData = HealthRecordResponseDTO>(
    id: string,
    healthUpdateDTO: HealthUpdateDTO, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.put<TData>(
      `http://localhost:8080/data/healthRecords/${id}`,
      healthUpdateDTO,options
    );
  }
 deleteHealthRecord<TData = void>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    deleteHealthRecord<TData = void>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    deleteHealthRecord<TData = void>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;deleteHealthRecord<TData = void>(
    id: string, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.delete<TData>(
      `http://localhost:8080/data/healthRecords/${id}`,options
    );
  }
 getAllHealthRecords<TData = PagedModelHealthRecordResponseDTO>(
    params: GetAllHealthRecordsParams, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    getAllHealthRecords<TData = PagedModelHealthRecordResponseDTO>(
    params: GetAllHealthRecordsParams, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    getAllHealthRecords<TData = PagedModelHealthRecordResponseDTO>(
    params: GetAllHealthRecordsParams, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;getAllHealthRecords<TData = PagedModelHealthRecordResponseDTO>(
    params: GetAllHealthRecordsParams, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.get<TData>(
      `http://localhost:8080/data/healthRecords`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }
 createHealth<TData = HealthRecordResponseDTO>(
    healthCreateDTO: HealthCreateDTO, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    createHealth<TData = HealthRecordResponseDTO>(
    healthCreateDTO: HealthCreateDTO, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    createHealth<TData = HealthRecordResponseDTO>(
    healthCreateDTO: HealthCreateDTO, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;createHealth<TData = HealthRecordResponseDTO>(
    healthCreateDTO: HealthCreateDTO, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.post<TData>(
      `http://localhost:8080/data/healthRecords`,
      healthCreateDTO,options
    );
  }
 getTotalCount1<TData = GetTotalCount1200>(
    params: GetTotalCount1Params, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    getTotalCount1<TData = GetTotalCount1200>(
    params: GetTotalCount1Params, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    getTotalCount1<TData = GetTotalCount1200>(
    params: GetTotalCount1Params, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;getTotalCount1<TData = GetTotalCount1200>(
    params: GetTotalCount1Params, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.get<TData>(
      `http://localhost:8080/data/healthRecords/count`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }
};

export type GetHealthRecordClientResult = NonNullable<HealthRecordResponseDTO>
export type UpdateHealthRecordClientResult = NonNullable<HealthRecordResponseDTO>
export type DeleteHealthRecordClientResult = NonNullable<void>
export type GetAllHealthRecordsClientResult = NonNullable<PagedModelHealthRecordResponseDTO>
export type CreateHealthClientResult = NonNullable<HealthRecordResponseDTO>
export type GetTotalCount1ClientResult = NonNullable<GetTotalCount1200>
