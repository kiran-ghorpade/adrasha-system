/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * ADRASHA DATA-SERVICE API Docs
 * OpenAPI spec version: 1.0.0
 */
import {
  HttpClient
} from '@angular/common/http';
import type {
  HttpContext,
  HttpEvent,
  HttpHeaders,
  HttpParams,
  HttpResponse as AngularHttpResponse
} from '@angular/common/http';

import {
  Injectable
} from '@angular/core';

import {
  Observable
} from 'rxjs';

import type {
  GetHealthRecordCountParams,
  GetHealthRecordPageParams,
  HealthRecordCreateDTO,
  HealthRecordPageResponseDTO,
  HealthRecordResponseDTO,
  HealthRecordUpdateDTO
} from '../../model/dataService';



type HttpClientOptions = {
  headers?: HttpHeaders | {
      [header: string]: string | string[];
  };
  context?: HttpContext;
  observe?: any;
  params?: HttpParams | {
    [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;
  };
  reportProgress?: boolean;
  responseType?: any;
  withCredentials?: boolean;
};



@Injectable({ providedIn: 'root' })
export class HealthRecordsService {
  constructor(
    private http: HttpClient,
  ) {} getHealthRecord<TData = HealthRecordResponseDTO>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    getHealthRecord<TData = HealthRecordResponseDTO>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    getHealthRecord<TData = HealthRecordResponseDTO>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;getHealthRecord<TData = HealthRecordResponseDTO>(
    id: string, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.get<TData>(
      `http://localhost:8080/data/health/records/${id}`,options
    );
  }
 updateHealthRecord<TData = HealthRecordResponseDTO>(
    id: string,
    healthRecordUpdateDTO: HealthRecordUpdateDTO, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    updateHealthRecord<TData = HealthRecordResponseDTO>(
    id: string,
    healthRecordUpdateDTO: HealthRecordUpdateDTO, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    updateHealthRecord<TData = HealthRecordResponseDTO>(
    id: string,
    healthRecordUpdateDTO: HealthRecordUpdateDTO, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;updateHealthRecord<TData = HealthRecordResponseDTO>(
    id: string,
    healthRecordUpdateDTO: HealthRecordUpdateDTO, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.put<TData>(
      `http://localhost:8080/data/health/records/${id}`,
      healthRecordUpdateDTO,options
    );
  }
 deleteHealthRecord<TData = void>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    deleteHealthRecord<TData = void>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    deleteHealthRecord<TData = void>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;deleteHealthRecord<TData = void>(
    id: string, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.delete<TData>(
      `http://localhost:8080/data/health/records/${id}`,options
    );
  }
 getHealthRecordPage<TData = HealthRecordPageResponseDTO>(
    params: GetHealthRecordPageParams, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    getHealthRecordPage<TData = HealthRecordPageResponseDTO>(
    params: GetHealthRecordPageParams, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    getHealthRecordPage<TData = HealthRecordPageResponseDTO>(
    params: GetHealthRecordPageParams, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;getHealthRecordPage<TData = HealthRecordPageResponseDTO>(
    params: GetHealthRecordPageParams, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.get<TData>(
      `http://localhost:8080/data/health/records`,{
    ...options,
        params: {...params.filterDTO, ...params.pageable, ...options?.params},}
    );
  }
 createHealth<TData = HealthRecordResponseDTO>(
    healthRecordCreateDTO: HealthRecordCreateDTO, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    createHealth<TData = HealthRecordResponseDTO>(
    healthRecordCreateDTO: HealthRecordCreateDTO, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    createHealth<TData = HealthRecordResponseDTO>(
    healthRecordCreateDTO: HealthRecordCreateDTO, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;createHealth<TData = HealthRecordResponseDTO>(
    healthRecordCreateDTO: HealthRecordCreateDTO, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.post<TData>(
      `http://localhost:8080/data/health/records`,
      healthRecordCreateDTO,options
    );
  }
 getHealthRecordCount<TData = number>(
    params: GetHealthRecordCountParams, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    getHealthRecordCount<TData = number>(
    params: GetHealthRecordCountParams, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    getHealthRecordCount<TData = number>(
    params: GetHealthRecordCountParams, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;getHealthRecordCount<TData = number>(
    params: GetHealthRecordCountParams, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.get<TData>(
      `http://localhost:8080/data/health/records/count`,{
    ...options,
        params: {...params.filterDTO, ...options?.params},}
    );
  }
};

export type GetHealthRecordClientResult = NonNullable<HealthRecordResponseDTO>
export type UpdateHealthRecordClientResult = NonNullable<HealthRecordResponseDTO>
export type DeleteHealthRecordClientResult = NonNullable<void>
export type GetHealthRecordPageClientResult = NonNullable<HealthRecordPageResponseDTO>
export type CreateHealthClientResult = NonNullable<HealthRecordResponseDTO>
export type GetHealthRecordCountClientResult = NonNullable<number>
