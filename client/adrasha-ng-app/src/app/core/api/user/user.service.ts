/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * ADRASHA USER-SERVICE API Docs
 * OpenAPI spec version: 1.0.0
 */
import {
  HttpClient
} from '@angular/common/http';
import type {
  HttpContext,
  HttpEvent,
  HttpHeaders,
  HttpParams,
  HttpResponse as AngularHttpResponse
} from '@angular/common/http';

import {
  Injectable
} from '@angular/core';

import {
  Observable
} from 'rxjs';

import type {
  GetAllUsersParams,
  GetCountParams,
  UserPageResponseDTO,
  UserResponseDTO,
  UserUpdateDTO
} from '../../model/userService';



type HttpClientOptions = {
  headers?: HttpHeaders | {
      [header: string]: string | string[];
  };
  context?: HttpContext;
  observe?: any;
  params?: HttpParams | {
    [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;
  };
  reportProgress?: boolean;
  responseType?: any;
  withCredentials?: boolean;
};



@Injectable({ providedIn: 'root' })
export class UserService {
  constructor(
    private http: HttpClient,
  ) {} getUser<TData = UserResponseDTO>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    getUser<TData = UserResponseDTO>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    getUser<TData = UserResponseDTO>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;getUser<TData = UserResponseDTO>(
    id: string, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.get<TData>(
      `http://localhost:8080/users/${id}`,options
    );
  }
 udpatedUser<TData = UserResponseDTO>(
    id: string,
    userUpdateDTO: UserUpdateDTO, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    udpatedUser<TData = UserResponseDTO>(
    id: string,
    userUpdateDTO: UserUpdateDTO, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    udpatedUser<TData = UserResponseDTO>(
    id: string,
    userUpdateDTO: UserUpdateDTO, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;udpatedUser<TData = UserResponseDTO>(
    id: string,
    userUpdateDTO: UserUpdateDTO, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.put<TData>(
      `http://localhost:8080/users/${id}`,
      userUpdateDTO,options
    );
  }
 deleteUser<TData = void>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    deleteUser<TData = void>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    deleteUser<TData = void>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;deleteUser<TData = void>(
    id: string, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.delete<TData>(
      `http://localhost:8080/users/${id}`,options
    );
  }
 getAllUsers<TData = UserPageResponseDTO>(
    params: GetAllUsersParams, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    getAllUsers<TData = UserPageResponseDTO>(
    params: GetAllUsersParams, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    getAllUsers<TData = UserPageResponseDTO>(
    params: GetAllUsersParams, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;getAllUsers<TData = UserPageResponseDTO>(
    params: GetAllUsersParams, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.get<TData>(
      `http://localhost:8080/users`,{
    ...options,
        params: {...params.filterDTO, ...params.pageable, ...options?.params},}
    );
  }
 getCurrentUser<TData = UserResponseDTO>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    getCurrentUser<TData = UserResponseDTO>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    getCurrentUser<TData = UserResponseDTO>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;getCurrentUser<TData = UserResponseDTO>(
     options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.get<TData>(
      `http://localhost:8080/users/me`,options
    );
  }
 getCount<TData = string>(
    params: GetCountParams, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    getCount<TData = string>(
    params: GetCountParams, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    getCount<TData = string>(
    params: GetCountParams, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;getCount<TData = string>(
    params: GetCountParams, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.get<TData>(
      `http://localhost:8080/users/analytics/count`,{
    ...options,
        params: {...params.filterDTO, ...options?.params},}
    );
  }
 getRoleCount<TData = string>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    getRoleCount<TData = string>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    getRoleCount<TData = string>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;getRoleCount<TData = string>(
     options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.get<TData>(
      `http://localhost:8080/users/analytics/count/role`,options
    );
  }
 removeRole<TData = void>(
    id: string,
    role: 'SYSTEM' | 'USER' | 'ADMIN' | 'ASHA', options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    removeRole<TData = void>(
    id: string,
    role: 'SYSTEM' | 'USER' | 'ADMIN' | 'ASHA', options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    removeRole<TData = void>(
    id: string,
    role: 'SYSTEM' | 'USER' | 'ADMIN' | 'ASHA', options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;removeRole<TData = void>(
    id: string,
    role: 'SYSTEM' | 'USER' | 'ADMIN' | 'ASHA', options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.delete<TData>(
      `http://localhost:8080/users/${id}/roles/${role}`,options
    );
  }
};

export type GetUserClientResult = NonNullable<UserResponseDTO>
export type UdpatedUserClientResult = NonNullable<UserResponseDTO>
export type DeleteUserClientResult = NonNullable<void>
export type GetAllUsersClientResult = NonNullable<UserPageResponseDTO>
export type GetCurrentUserClientResult = NonNullable<UserResponseDTO>
export type GetCountClientResult = NonNullable<string>
export type GetRoleCountClientResult = NonNullable<string>
export type RemoveRoleClientResult = NonNullable<void>
