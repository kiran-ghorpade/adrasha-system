/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * ADRASHA MASTERDATA-SERVICE API Docs
 * OpenAPI spec version: 1.0.0
 */
import {
  HttpClient
} from '@angular/common/http';
import type {
  HttpContext,
  HttpEvent,
  HttpHeaders,
  HttpParams,
  HttpResponse as AngularHttpResponse
} from '@angular/common/http';

import {
  Injectable
} from '@angular/core';

import {
  Observable
} from 'rxjs';

import type {
  GetAllHealthCentersParams,
  GetTotalCount1Params,
  HealthCenterCreateDTO,
  HealthCenterPageResponseDTO,
  HealthCenterResponseDTO,
  HealthCenterUpdateDTO
} from '../../model/masterdataService';



type HttpClientOptions = {
  headers?: HttpHeaders | {
      [header: string]: string | string[];
  };
  context?: HttpContext;
  observe?: any;
  params?: HttpParams | {
    [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;
  };
  reportProgress?: boolean;
  responseType?: any;
  withCredentials?: boolean;
};



@Injectable({ providedIn: 'root' })
export class HealthCenterService {
  constructor(
    private http: HttpClient,
  ) {} getHealthCenter<TData = HealthCenterResponseDTO>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    getHealthCenter<TData = HealthCenterResponseDTO>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    getHealthCenter<TData = HealthCenterResponseDTO>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;getHealthCenter<TData = HealthCenterResponseDTO>(
    id: string, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.get<TData>(
      `http://localhost:8080/masterdata/healthCenters/${id}`,options
    );
  }
 updateHealthCenter<TData = HealthCenterResponseDTO>(
    id: string,
    healthCenterUpdateDTO: HealthCenterUpdateDTO, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    updateHealthCenter<TData = HealthCenterResponseDTO>(
    id: string,
    healthCenterUpdateDTO: HealthCenterUpdateDTO, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    updateHealthCenter<TData = HealthCenterResponseDTO>(
    id: string,
    healthCenterUpdateDTO: HealthCenterUpdateDTO, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;updateHealthCenter<TData = HealthCenterResponseDTO>(
    id: string,
    healthCenterUpdateDTO: HealthCenterUpdateDTO, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.put<TData>(
      `http://localhost:8080/masterdata/healthCenters/${id}`,
      healthCenterUpdateDTO,options
    );
  }
 deleteHealthCenter<TData = void>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    deleteHealthCenter<TData = void>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    deleteHealthCenter<TData = void>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;deleteHealthCenter<TData = void>(
    id: string, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.delete<TData>(
      `http://localhost:8080/masterdata/healthCenters/${id}`,options
    );
  }
 getAllHealthCenters<TData = HealthCenterPageResponseDTO>(
    params: GetAllHealthCentersParams, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    getAllHealthCenters<TData = HealthCenterPageResponseDTO>(
    params: GetAllHealthCentersParams, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    getAllHealthCenters<TData = HealthCenterPageResponseDTO>(
    params: GetAllHealthCentersParams, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;getAllHealthCenters<TData = HealthCenterPageResponseDTO>(
    params: GetAllHealthCentersParams, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.get<TData>(
      `http://localhost:8080/masterdata/healthCenters`,{
    ...options,
        ...params, ...options?.params,}
    );
  }
 createHealthCenter<TData = HealthCenterResponseDTO>(
    healthCenterCreateDTO: HealthCenterCreateDTO, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    createHealthCenter<TData = HealthCenterResponseDTO>(
    healthCenterCreateDTO: HealthCenterCreateDTO, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    createHealthCenter<TData = HealthCenterResponseDTO>(
    healthCenterCreateDTO: HealthCenterCreateDTO, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;createHealthCenter<TData = HealthCenterResponseDTO>(
    healthCenterCreateDTO: HealthCenterCreateDTO, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.post<TData>(
      `http://localhost:8080/masterdata/healthCenters`,
      healthCenterCreateDTO,options
    );
  }
 getTotalCount1<TData = string>(
    params: GetTotalCount1Params, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    getTotalCount1<TData = string>(
    params: GetTotalCount1Params, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    getTotalCount1<TData = string>(
    params: GetTotalCount1Params, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;getTotalCount1<TData = string>(
    params: GetTotalCount1Params, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.get<TData>(
      `http://localhost:8080/masterdata/healthCenters/count`,{
    ...options,
        ...params, ...options?.params,}
    );
  }
};

export type GetHealthCenterClientResult = NonNullable<HealthCenterResponseDTO>
export type UpdateHealthCenterClientResult = NonNullable<HealthCenterResponseDTO>
export type DeleteHealthCenterClientResult = NonNullable<void>
export type GetAllHealthCentersClientResult = NonNullable<HealthCenterPageResponseDTO>
export type CreateHealthCenterClientResult = NonNullable<HealthCenterResponseDTO>
export type GetTotalCount1ClientResult = NonNullable<string>
