/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * ADRASHA ANALYTICS-SERVICE API Docs
 * OpenAPI spec version: 1.0.0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  FamilyStats,
  MasterdataStats,
  MemberStats,
  UserStats
} from '../../../model/analytics-service';


export const getGetUserStatsResponseMock = (overrideResponse: Partial< UserStats > = {}): UserStats => ({totalUsers: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), roleDistribution: faker.helpers.arrayElement([{
        [faker.string.alphanumeric(5)]: faker.number.int({min: undefined, max: undefined})
      }, undefined]), ...overrideResponse})

export const getGetMemberStatsResponseMock = (overrideResponse: Partial< MemberStats > = {}): MemberStats => ({totalMembers: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), averageMembersPerFamily: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), undefined]), genderDistribution: faker.helpers.arrayElement([{
        [faker.string.alphanumeric(5)]: faker.number.int({min: undefined, max: undefined})
      }, undefined]), ageDistribution: faker.helpers.arrayElement([{
        [faker.string.alphanumeric(5)]: faker.number.int({min: undefined, max: undefined})
      }, undefined]), ...overrideResponse})

export const getGetMasterDataStatsResponseMock = (overrideResponse: Partial< MasterdataStats > = {}): MasterdataStats => ({totalLocations: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalHealthCenters: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalNCD: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getGetFamilyStatsResponseMock = (overrideResponse: Partial< FamilyStats > = {}): FamilyStats => ({totalFamilies: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), povertyStats: faker.helpers.arrayElement([{
        [faker.string.alphanumeric(5)]: faker.number.int({min: undefined, max: undefined})
      }, undefined]), ...overrideResponse})


export const getGetUserStatsMockHandler = (overrideResponse?: UserStats | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UserStats> | UserStats)) => {
  return http.get('*/analytics/user/stats', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetUserStatsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetMemberStatsMockHandler = (overrideResponse?: MemberStats | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<MemberStats> | MemberStats)) => {
  return http.get('*/analytics/member/stats', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetMemberStatsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetMasterDataStatsMockHandler = (overrideResponse?: MasterdataStats | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<MasterdataStats> | MasterdataStats)) => {
  return http.get('*/analytics/masterdata/stats', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetMasterDataStatsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetFamilyStatsMockHandler = (overrideResponse?: FamilyStats | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<FamilyStats> | FamilyStats)) => {
  return http.get('*/analytics/family/stats', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetFamilyStatsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getAnalyticsSummaryMock = () => [
  getGetUserStatsMockHandler(),
  getGetMemberStatsMockHandler(),
  getGetMasterDataStatsMockHandler(),
  getGetFamilyStatsMockHandler()]
