/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * ADRASHA MASTERDATA-SERVICE API Docs
 * OpenAPI spec version: 1.0.0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  GetTotalCount1200,
  HealthCenterResponseDTO,
  PagedModelHealthCenterResponseDTO
} from '../../../model/masterdata-service';


export const getGetHealthCenterResponseMock = (overrideResponse: Partial< HealthCenterResponseDTO > = {}): HealthCenterResponseDTO => ({id: faker.helpers.arrayElement([faker.string.uuid(), undefined]), name: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), centerType: faker.helpers.arrayElement([faker.helpers.arrayElement(['Subcenter','Primary Health Center','Community Health Center','Sub-district Hospital','District Hospital','Medical College'] as const), undefined]), locationId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), totalFamilies: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalPopulation: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), createdAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), ...overrideResponse})

export const getUpdateHealthCenterResponseMock = (overrideResponse: Partial< HealthCenterResponseDTO > = {}): HealthCenterResponseDTO => ({id: faker.helpers.arrayElement([faker.string.uuid(), undefined]), name: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), centerType: faker.helpers.arrayElement([faker.helpers.arrayElement(['Subcenter','Primary Health Center','Community Health Center','Sub-district Hospital','District Hospital','Medical College'] as const), undefined]), locationId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), totalFamilies: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalPopulation: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), createdAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), ...overrideResponse})

export const getGetAllHealthCentersResponseMock = (overrideResponse: Partial< PagedModelHealthCenterResponseDTO > = {}): PagedModelHealthCenterResponseDTO => ({content: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.uuid(), undefined]), name: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), centerType: faker.helpers.arrayElement([faker.helpers.arrayElement(['Subcenter','Primary Health Center','Community Health Center','Sub-district Hospital','District Hospital','Medical College'] as const), undefined]), locationId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), totalFamilies: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalPopulation: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), createdAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), page: faker.helpers.arrayElement([{size: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), number: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalElements: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalPages: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), ...overrideResponse})

export const getCreateHealthCenterResponseMock = (overrideResponse: Partial< HealthCenterResponseDTO > = {}): HealthCenterResponseDTO => ({id: faker.helpers.arrayElement([faker.string.uuid(), undefined]), name: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), centerType: faker.helpers.arrayElement([faker.helpers.arrayElement(['Subcenter','Primary Health Center','Community Health Center','Sub-district Hospital','District Hospital','Medical College'] as const), undefined]), locationId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), totalFamilies: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalPopulation: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), createdAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), ...overrideResponse})

export const getGetTotalCount1ResponseMock = (): GetTotalCount1200 => ({
        [faker.string.alphanumeric(5)]: faker.number.int({min: undefined, max: undefined})
      })


export const getGetHealthCenterMockHandler = (overrideResponse?: HealthCenterResponseDTO | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<HealthCenterResponseDTO> | HealthCenterResponseDTO)) => {
  return http.get('*/masterdata/healthCenters/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetHealthCenterResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateHealthCenterMockHandler = (overrideResponse?: HealthCenterResponseDTO | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<HealthCenterResponseDTO> | HealthCenterResponseDTO)) => {
  return http.put('*/masterdata/healthCenters/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getUpdateHealthCenterResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteHealthCenterMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/masterdata/healthCenters/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getGetAllHealthCentersMockHandler = (overrideResponse?: PagedModelHealthCenterResponseDTO | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<PagedModelHealthCenterResponseDTO> | PagedModelHealthCenterResponseDTO)) => {
  return http.get('*/masterdata/healthCenters', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetAllHealthCentersResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCreateHealthCenterMockHandler = (overrideResponse?: HealthCenterResponseDTO | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<HealthCenterResponseDTO> | HealthCenterResponseDTO)) => {
  return http.post('*/masterdata/healthCenters', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getCreateHealthCenterResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetTotalCount1MockHandler = (overrideResponse?: GetTotalCount1200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetTotalCount1200> | GetTotalCount1200)) => {
  return http.get('*/masterdata/healthCenters/count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetTotalCount1ResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getHealthCenterManagementMock = () => [
  getGetHealthCenterMockHandler(),
  getUpdateHealthCenterMockHandler(),
  getDeleteHealthCenterMockHandler(),
  getGetAllHealthCentersMockHandler(),
  getCreateHealthCenterMockHandler(),
  getGetTotalCount1MockHandler()]
